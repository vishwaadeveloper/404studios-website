
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.FeatureGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  iconName: 'iconName',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  name: 'name',
  description: 'description',
  explanation: 'explanation',
  isCountable: 'isCountable',
  minCount: 'minCount',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeatureTierScalarFieldEnum = {
  id: 'id',
  featureId: 'featureId',
  tierName: 'tierName',
  description: 'description',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  basePrice: 'basePrice',
  timelineDays: 'timelineDays',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BusinessTypeDefaultScalarFieldEnum = {
  id: 'id',
  businessTypeId: 'businessTypeId',
  featureId: 'featureId',
  defaultTier: 'defaultTier',
  defaultCount: 'defaultCount',
  createdAt: 'createdAt'
};

exports.Prisma.BusinessTypePageScalarFieldEnum = {
  id: 'id',
  businessTypeId: 'businessTypeId',
  pageType: 'pageType',
  pageName: 'pageName',
  isDefault: 'isDefault',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  categoryId: 'categoryId',
  priceMin: 'priceMin',
  priceMax: 'priceMax',
  demoUrl: 'demoUrl',
  iconName: 'iconName',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  company: 'company',
  projectType: 'projectType',
  budgetRange: 'budgetRange',
  timeline: 'timeline',
  description: 'description',
  preferredPackage: 'preferredPackage',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TimeSlotScalarFieldEnum = {
  id: 'id',
  date: 'date',
  time: 'time',
  isAvailable: 'isAvailable',
  contactId: 'contactId',
  createdAt: 'createdAt'
};

exports.Prisma.ContactFormStepScalarFieldEnum = {
  id: 'id',
  contactId: 'contactId',
  stepNumber: 'stepNumber',
  stepData: 'stepData',
  completedAt: 'completedAt'
};

exports.Prisma.PricingCalculationScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  businessTypeId: 'businessTypeId',
  totalPrice: 'totalPrice',
  calculationData: 'calculationData',
  contactId: 'contactId',
  createdAt: 'createdAt'
};

exports.Prisma.CalculationFeatureScalarFieldEnum = {
  id: 'id',
  calculationId: 'calculationId',
  featureId: 'featureId',
  tierName: 'tierName',
  count: 'count',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice'
};

exports.Prisma.ContactInfoScalarFieldEnum = {
  id: 'id',
  type: 'type',
  label: 'label',
  value: 'value',
  iconName: 'iconName',
  color: 'color',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectTypeScalarFieldEnum = {
  id: 'id',
  value: 'value',
  label: 'label',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.BudgetRangeScalarFieldEnum = {
  id: 'id',
  value: 'value',
  label: 'label',
  minAmount: 'minAmount',
  maxAmount: 'maxAmount',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.TimelineOptionScalarFieldEnum = {
  id: 'id',
  value: 'value',
  label: 'label',
  description: 'description',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.PackageOptionScalarFieldEnum = {
  id: 'id',
  value: 'value',
  label: 'label',
  description: 'description',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.MigrationLogScalarFieldEnum = {
  id: 'id',
  migrationPhase: 'migrationPhase',
  entityType: 'entityType',
  entityId: 'entityId',
  operation: 'operation',
  oldValues: 'oldValues',
  newValues: 'newValues',
  validationResult: 'validationResult',
  status: 'status',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt'
};

exports.Prisma.SystemAuditScalarFieldEnum = {
  id: 'id',
  tableName: 'tableName',
  recordId: 'recordId',
  operation: 'operation',
  oldValues: 'oldValues',
  newValues: 'newValues',
  userId: 'userId',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.FeatureFlagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isEnabled: 'isEnabled',
  rolloutPercentage: 'rolloutPercentage',
  conditions: 'conditions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  FeatureGroup: 'FeatureGroup',
  Feature: 'Feature',
  FeatureTier: 'FeatureTier',
  BusinessType: 'BusinessType',
  BusinessTypeDefault: 'BusinessTypeDefault',
  BusinessTypePage: 'BusinessTypePage',
  ServiceCategory: 'ServiceCategory',
  Service: 'Service',
  Contact: 'Contact',
  TimeSlot: 'TimeSlot',
  ContactFormStep: 'ContactFormStep',
  PricingCalculation: 'PricingCalculation',
  CalculationFeature: 'CalculationFeature',
  ContactInfo: 'ContactInfo',
  ProjectType: 'ProjectType',
  BudgetRange: 'BudgetRange',
  TimelineOption: 'TimelineOption',
  PackageOption: 'PackageOption',
  MigrationLog: 'MigrationLog',
  SystemAudit: 'SystemAudit',
  FeatureFlag: 'FeatureFlag'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
